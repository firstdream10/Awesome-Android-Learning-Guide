2017.10.16

1.你创建一个类的时候，什么时候选择类、内部类、静态内部类、匿名内部类？设计框架时该如何选择？

在进行类的选择的时候，首先需要清楚各种类的区别才能够正确的选择，首先从普通类和内部类说起，内部类相对于普通类而言，在外部使用的时相对而言比较麻烦，但在外部类的内部使用使与普通类差不多，并且其被封装在一个类中，隐藏了实现细节，所以当一个 A 类与 B 类联系较多，而与其它类的联系很少并需要隐藏其实现细节的时候会选择 A 类作为内部类实现。

再说普通内部类和静态内部类，两者相比普通内部类能够直接使用外部类的成员变量和方法，内部持有外部类对象的引用，而静态内部类不能直接使用外部类的成员变量和方法，但静态内部类相对普通内部类的功能更为完整，静态内部类能够定义静态变量，所以如果一个 A 类与 B 类存在联系，但是联系不太深，可能 B 类需要 A 类完成一项功能，A 类又不需要直接使用 B 类中的任何成员变量或方法，并且 A 类与其它类联系很少的时候会选择 A 类作为 静态内部类实现，除此之外的都会选择普通内部类实现

匿名内部类适用于只使用一次的情况

设计框架不太了解，但是目前思考的应该还是根据上述原则来进行考虑

2.你什么时候会创建一个抽象类，为什么不用接口？设计框架时该如何选择？
选择之前明确抽象类和接口的区别，抽象类是对类的抽象，更多表达的是约束子类的作用，而接口是对行为的抽象，更多的是约束一个行为如何实现，抽象类中可以定义成员变量，而接口不能够定义成员变量。一个类只能继承一个抽象类，但是能实现多个接口，所以在抽象类和接口之间选择的时候，能够选择使用接口的尽量使用接口而不是抽象类，具体判断标准在于使用时需不需要定义成员变量，如果不需要可以都选择使用接口实现。

3.类的成员变量修饰符有哪些？ public protected private 怎么选，什么时候用 final 修饰，什么时候会用 static 的？
类的成员变量修饰符可以是 public、protected、private、final、static，其中 public、protected、private 三者都是用来限定成员变量的访问范围，所以对于同一成员变量只能被其中一个修饰。

final 修饰成员变量时表明成员变量值一旦有了初始值就不能再改变，被 final 修饰的成员变量只能够在初始化块或者是构造器当中指定，如果没有在这两者之中指定初始值，则被 final 修饰的成员变量的值一直会是系统分配的 0、‘\u0000’、false 或 null。

static 修饰成员变量时表明该成员变量属于类而不在属于某个对象，static 表明该成员变量的内存地址一经分配就不在变动
static 和 final 可以一起修饰成员变量，由于此时成员变量的内存地址和内容值不再变动，所以实际上该成员变量就是一个常量

在了解上述的区别之后就可以正确的使用各个变量修饰符了，对于 private、protected、public 而言，主要看成员变量需要可被访问的范围有多大，但是一般而言成员变量一般是 private 进行修饰，而对于 static 而言，主要看该成员变量对于所有对象而言是否一直是相同的？如果是相同的则会采用 static 进行修饰，否则不需要，而对于 final 主要看该成员变量是否在对象的整个生存期内不变，如果不变则会采用 final 进行修饰。

4.什么时候会发生自动装箱拆箱？有什么需要注意的吗？
自动装箱拆箱发生在基本类型和其包装类相互进行自动转换的时候，其中基本类型被转换成包装类对象称之为装箱，包装类对象转换成几本类型称之为拆箱

自动装箱拆箱比较需要关注的问题时：性能问题、重载、缓存机制
由于自动装箱的时候需要在内存中创建对象，所以频繁进行拆装箱时将会不断的新建对象从而将会导致性能下降
对于 remove(int i) 和 remove(Object i) 两个方法而言，如果发生自动装箱则可能会调用第二个方法，但是实际上这种情况不会发生自动装箱
大部分基本类型的包装类都提供了缓存机制（除了 Float、Double），因为很多基本类型量属于经常使用的，如果这个时候不提供缓存机制，则会导致每次装箱的时候都需要创建新的对象，这样会造成不必要的性能损失。所以在 Integer 类中可以看到官方建议使用 valueOf 而不是构造器去创建 Integer 对象

5.注解是什么？有几种类型？什么时候用注解？
注解是一种用于描述程序元素信息的修饰符，可以用来修饰包、类、构造器、方法、成员变量、参数、局部变量。

按照系统内置的注解，可以分为基本注解、元注解、自定义注解。按照是否有成员变量可以分为标记注解、元数据注解。按照处理方式，可以分为运行时注解、编译时注解。

当我们需要为程序中的元素提供信息，并且这些信息得到处理的时候，就可以考虑使用注解。

6.反射是什么？什么时候用反射？
所谓反射是指能够让我们在运行时获取类的各种成员和信息的一种机制，而之所以会存在反射，是因为在 Java 中的对象存在着编译时类型和运行时类型，可能在编译时根本无法确定该对象属于哪个类，这个时候为了获取对象和类的真实信息就必须使用反射。

7.泛型使用在什么场景，你有写过使用泛型的代码吗？
泛型来自“参数化类型”的概念，对于集合而言，如果没有泛型则无法确保集合中的存放的是同一类型，那么在使用集合的时候可能会发生类型错误，而拥有泛型之后则可以避免这类问题。另外通过泛型的类型通配符可以代表一系列的类型，这样就使得程序的通用性增强了。现在写泛型代码比较少，理解还不够。

8.异常有几种类型，OOM 属于哪种？
异常的基类是 Throwable，可以被分为 Error 和 Exception，其中 Error 无法被应用程序处理，Exception 分为 RuntimeException 和 CheckedException，其中 CheckException 需要被显式处理，而 RuntimeException 不是必须的进行显式处理。OOM 会抛出 OutOfMemoryError，而 OutOfMemoryError 是 Error 的子类，所以属于 Error 

9.集合你一般使用哪些？列表、哈希表都有哪些实现，优劣清楚吗？
集合一般使用的是 HashSet、TreeSet、ArrayList、HashMap、TreeMap，HashSet 基于 hash 表实现，TreeSet 基于红黑树实现，HashSet 查找速度快，但是里面存储的元素是无序的，TreeSet 里面存储的元素则是有序的，ArrayList 采用数组实现，ArrayList 执行查询的性能较好，但是插入和删除则性能较差。HashMap 和 TreeMap 的性能差别基本相同。

10.IO 你一般怎么用？
对于 IO 到目前为止只在文件读写的时候用的较多，IO 分为输入流和输出流，每种流又分为字符流和字节流，而在字节流中用的比较多的是 FileInputStream、FileOutputStream，字符流用的比较多的则是 FileWriter、FileReader、BufferedReader、BufferedWriter。其中 BufferedReader、BufferedWriter 是缓冲流，需要对普通的流进行包装之后才能够使用。

11.String 
String 类之所以设计成不可变是因为字符串是常量，其被创建之后就不能够被修改，如果 String 能够被修改，那么容易导致线程不安全。而为了弥补 String 不可变，Java 提供了 StringBuilder 和 StringBuffer 用于创建可变的字符串，两者基本类似，只是 StringBuffer 线程安全，而 StringBuilder 线程不安全，在创建一个可变的字符串对象的时候，应该优先考虑 StringBuffer