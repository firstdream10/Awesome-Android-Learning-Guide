数组（Array）：
概念：就是把有限个相同数据类型的元素顺序的放在一起，用一个变量命名，通过编号可以按顺序访问指定位置的元素的一个有序集合。
声明方式：
int[] num1 = new int[10];
int[] num2 = {1,2,3};
int[] num3 = new int[3];
num3[0] = 0;
num3[1] = 1;
num3[2] = 2;

通过下标获取数组指定位置的元素的值
int[] num = {1,2,5};
int a = num[0];//a的值为1
int b = num[1];//b的值为2

为数组赋值
int[] num = {1,2,5};
num[1] = 10;//现在num数组的值为1,10,5

多维数组：
初始化：
int[][] num = new int[3][3];
int[] num2 = {{1,2,3},{4,5,6},{7,8,9}};
int a = num2[1][0];//a的值是4
int b = num2[1].length;//b的值是3，是第二维的长度
注意：在增加数组的维数时，数组所占的存储空间会大幅度增加，所以要慎用多维数组。

数组的特点：
1.数组是相同数据类型的元素的集合
2.定长(数组的长度是固定的，如果在赋值是发现数组长度不够用的时候没有其他办法，只能重新再声明一个数组)
3.按顺序访问(我们在访问一个数组的某个元素时，必须从第一个元素开始顺序访问，直到访问到指定位置的元素，虽然开发时是直接通过下标去取指定位置的元素，但是计算机实际上是顺序访问的)

数组使用时的常见异常：
1. NullPointerException 空指针异常
原因： 引用类型变量没有指向任何对象，而访问了对象的属性或者是调用了对象的方法。
2. ArrayIndexOutOfBoundsException 索引值越界。
原因：访问了不存在的索引值。注意数组的角标是从0开始的。

Arrays类(方便的操作数组)：
给数组赋值：通过 fill 方法。
对数组排序：通过 sort 方法,按升序。
比较数组：通过 equals 方法比较数组中元素值是否相等。
查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。

数组的适用场景：
因为数组的长度是固定的，所以一般在不会变化的业务上适合使用数组。



